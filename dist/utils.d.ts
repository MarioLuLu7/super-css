import { SuperCss } from './superCss';
export declare type TN = '' | undefined | null;
export declare type Tcss<T, P, F> = T | Tfn<T, P, F> | TN;
export declare type Tfn<T, P, F> = (d: {
    p: P;
    m: F;
}) => T;
export declare function base<T, P, F>(that: SuperCss, isImportant: boolean, value: Tcss<T, P, F>, key: string | string[], enums: P, iswebkit?: boolean, ismoz?: boolean, iso?: boolean): SuperCss;
export declare const end: (v: SuperCss, id?: string | undefined) => string;
export declare const addCssBackName: (params?: {
    value?: string | undefined;
    className?: string | undefined;
    after?: string | undefined;
    checkMap?: boolean | undefined;
}) => string;
export declare const fns: {
    rgb: (r: number, g: number, b: number) => string;
    rgba: (r: number, g: number, b: number, a: number) => string;
    hsl: (h: number, s: string | number, l: string | number) => string;
    hsla: (h: number, s: string | number, l: string | number, a: number) => string;
    url: (url: string) => string;
    linearGradient: (v: string) => string;
    radialGradient: (v: string) => string;
    repeatingLinearGradient: (v: string) => string;
    repeatingRadialGradient: (v: string) => string;
    rect: (top: string, right: string, bottom: string, left: string) => string;
    blur: (v: string) => string;
    brightness: (v: number | string) => string;
    contrast: (v: number | string) => string;
    dropShadow: (v: string) => string;
    grayscale: (v: number | string) => string;
    hueRotate: (v: number | string) => string;
    invert: (v: number | string) => string;
    opacity: (v: number | string) => string;
    saturate: (v: number | string) => string;
    sepia: (v: number | string) => string;
    matrix: (a: number, b: number, c: number, d: number, tx: number, ty: number) => string;
    matrix3d: (a1: number, b1: number, c1: number, d1: number, a2: number, b2: number, c2: number, d2: number, a3: number, b3: number, c3: number, d3: number, a4: number, b4: number, c4: number, d4: number) => string;
    translate: (x: string, y: string) => string;
    translate3d: (x: string, y: string, z: string) => string;
    translateX: (x: string) => string;
    translateY: (y: string) => string;
    translateZ: (z: string) => string;
    scale: (x: number, y?: number | undefined) => string;
    scale3d: (x: number, y: number, z: number) => string;
    scaleX: (v: number) => string;
    scaleY: (v: number) => string;
    scaleZ: (v: number) => string;
    rotate: (v: number | string) => string;
    rotate3d: (x: number, y: number, z: number, a: number | string) => string;
    rotateX: (v: number | string) => string;
    rotateY: (v: number | string) => string;
    rotateZ: (v: number | string) => string;
    skew: (xa: number | string, ya: number | string) => string;
    skewX: (v: number | string) => string;
    skewY: (v: number | string) => string;
    perspective: (v: string) => string;
};
